★Day58

Webサイト制作-8日目(JavaScript)

JavaScriptはオブジェクト指向言語の側面も持っている。オブジェクトを見ていこう。
[オブジェクトの定義]
jsでは波括弧でオブジェクトを定義する。以下は空のオブジェクト

var obj={};
以下はpenオブジェクト。プロパティ名:値でプロパティを定義していく。

var pen={
  color:"red",
  length:3
}
昨今のjsはクラス構文も使えるようになった。classを作成してみよう。
コンストラクタでプロパティを定義する。

class Pen{
    constructor(length){
        this.length=length;
    }
    write(){
        this.length-=0.5;
        return '書きました';
    }
}
let pen=new Pen(3);//長さ3でインスタンス作成
クラスの作成方法、インスタンスの生成方法がわかったところで、実際にソースを記述してみよう。
jsLesson6.htmlとして以下を記述する。

●jsLesson6.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>jsレッスン</title>
06
</head>
07
<body>
08
  <button onclick="btWrite()">書く</button>
09
  <button onclick="btCheck()">長さ見る</button>
10
  <div id="result"></div>
11
<script>
12
const result=document.getElementById("result");
13
class Pen{
14
    constructor(length){
15
        this.length=length;
16
    }
17
    write(){
18
        this.length-=0.5;
19
        return '書きました';
20
    }
21
}
22
let pen=new Pen(3);
23
 
24
const btWrite=()=>{
25
    let msg=pen.write();
26
    result.textContent=msg;
27
};
28
 
29
const btCheck=()=>{
30
    result.textContent=`長さは${pen.length}です。`;
31
};
32
</script>
33
</body>
34
</html>
ブラウザで実行してみよう。書くボタンで「書きました」長さ見るボタンで「長さは◯です。」と表示されれば成功だ。


Q1.Penクラスを作成し、３つのインスタンスを作ることによって以下のアプリを作成せよ。
1.スタート画面　４つのボタンが表示されている。


2.書くを押して見る。ペンをまだ持っていないので叱られる。


3.赤を持つをクリック


4.書くをクリック(押すたびに長さが減っていく)


[解答例]

01
<!DOCTYPE html>
02
<html lang="ja">
03
<head>
04
    <meta charset="UTF-8">
05
     
06
    <title>Document</title>
07
</head>
08
<body>
09
   <button class="select">赤を持つ</button> 
10
   <button class="select">緑を持つ</button> 
11
   <button class="select">青を持つ</button> 
12
   <button onclick="writePen()">書く</button> 
13
   <p id="info"></p>
14
   <script>
15
       class ColorPen{
16
           constructor(color,length){
17
               this.color=color;
18
               this.length=length;
19
           }
20
           write(){
21
               let msg='';
22
               if(this.length<=0){
23
                    msg='もうかけません!';
24
                     
25
               }else{
26
                    this.length-=0.5;
27
                    msg=this.color+'で書いた。残りの長さ'+this.length;
28
               }
29
               return msg;
30
           }
31
       }
32
       const bts=document.querySelectorAll('.select');
33
       let pens=[new ColorPen('赤',10),new ColorPen('緑',10),new ColorPen('青',10)];
34
       let pen=null;
35
       const info=document.getElementById('info');
36
       for(let i=0;i<bts.length;i++){
37
           bts[i].addEventListener('click',()=>{
38
                pen=pens[i];
39
                info.textContent=pen.color+'を持った。';
40
           });
41
       }
42
       const writePen=()=>{
43
           let msg='';
44
           if(pen==null){
45
            msg='ペンを持ってください!';
46
           }else{
47
            msg=pen.write();
48
           }
49
           info.textContent=msg;
50
       }; 
51
   </script>
52
</body>
53
</html>
[CSSの操作]
jsから動的にcssを操作できる。以下のソースを入力
●jsLesson7.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>jsレッスン</title>
06
</head>
07
<body>
08
<div id="box"></div>
09
<script>
10
let ele=document.getElementById("box");
11
ele.style.width="300px";
12
ele.style.height="200px";
13
ele.style.backgroundColor="blue";
14
ele.style.padding="10px";
15
ele.style.color="white";
16
ele.textContent="sample";
17
</script>
18
</body>
19
</html>
実行してみて以下のようになれば成功だ。


[ソースコード解説]
11~15行目:element(要素)が持つstyleオブジェクトのプロパティに値をセットしている。基本的にはcssの書き方に準じるが、background-colorなどのハイフン混じりのプロパティはbackgroundColorとキャメルケースで記述しなければならない。

Q2.先ほど作ったペンアプリを改良し、鉛筆の長さを長方形で表せるようにせよ。詳しくは実行例参照のこと
1.ペンを持つとペンの色を背景色とした長方形がペンの長さで描画される。

2.書くと長方形も短くなる。

Webサイト制作-9日目(JavaScript)

JavaScriptといえばイベント処理だ。ここまででもクリックイベントは出てきたが様々なイベントがあるさっそく見ていこう。
●jsLesson9.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>jsレッスン</title>
06
</head>
07
<body>
08
  <h1 id="msg">Hello</h1>
09
<div id="box"></div>
10
<script>
11
window.onload=function(){
12
  document.getElementById("msg").textContent="こんにちは、イベント！"
13
};
14
</script>
15
</body>
16
</html>
[ソースコード解説]
11行目:window.onload=function(){};文書読み込み完了後に処理を走らせたい場合の記述の一つ。
文書を読み込んでからでないと走らせられない処理も多い。読みんこんでから〜というのはいくつかパターンがあるがこれはよく使われるものの一つ。

[イベントハンドラ]
続いて以下のソースを入力
●jsLesson10.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>jsレッスン</title>
06
</head>
07
<body>
08
<button id="a">A</button>
09
<button id="b">B</button>
10
<div id="result"></div>
11
<script>
12
window.onload=function(){
13
  document.getElementById("a").onclick=myHandler;
14
  document.getElementById("b").onclick=myHandler;
15
};
16
function myHandler(e){
17
  document.getElementById("result").textContent=e.target.textContent + "が選ばれた";
18
}
19
</script>
20
</body>
21
</html>
[ソースコード解説]
二つのボタンに同じイベントハンドラを登録している。イベントハンドラが呼び出された際に、ブラウザがイベント情報を引数として渡してくれるのでそれをeとして受け取っている。e.targetでイベントが発生した要素を取得できる。

[イベントリスナー]
イベント処理を記述する方法にはリスナーとして登録する方法もある。
こうすることで一つのイベントに複数の処理を割つけることができる。

●jsLesson11.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>jsレッスン</title>
06
</head>
07
<body>
08
<button id="bt">click</button>
09
<div id="result"></div>
10
<script>
11
window.onload=function(){
12
  var ele=document.getElementById("bt");
13
  var result=document.getElementById("result");
14
  ele.addEventListener("click",function(){
15
    result.textContent="Clicked!";
16
  });
17
  ele.addEventListener("click",function(){
18
    window.alert("Clicked!!!");
19
  });
20
};
21
</script>
22
</body>
23
</html>
[ソースコード解説]
ボタンのクリックに二つのイベント処理を登録している。
[要素].addEventListener([イベントの種類],eventListener);
で要素にイベントリスナーを登録できる。(一般的に単一処理の場合はハンドラ、複数登録できる場合はリスナと使い分けることがあるがほぼ同一と考えて良い)
イベントの種類には様々なものがある、以下に参考となるリンクを貼っておくので見ておくこと。

addEventListener type一覧と各ブラウザ対応

[ファイルの分割]
ここまではhtmlの中に記述してきたが、実際はjsファイルとして分割することが多い。今回はLesson12フォルダを作ってその中にcss,js,imagesフォルダを作り、jsファイルを作成してみよう。
1.画像素材を以下からダウンロードし画像をimagesフォルダにおく。
Icon
下からダウンロード
 1 file(s)    869.65 KB

2.index.htmlを以下のように作成する。
01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>僕の猫ちゃん</title>
06
<link rel="stylesheet" href="css/main.css"/>
07
</head>
08
<body>
09
<div id="container">
10
<p>画像をクリックしてね</p>
11
<img  id="mainImage" src="images/cat1.jpg" alt="可愛い猫ちゃん" />
12
</div>
13
<script src="js/main.js"></script>
14
</body>
15
</html>
3.main.cssを以下のように作成しcssフォルダに入れる。

1
#container{
2
  width:80%;
3
  margin:0 auto;
4
}
5
img{
6
  display: block;
7
  width:80%;
8
}
4.main.jsを以下のように作成しjsフォルダに入れる。

1
window.onload=function(){
2
  var path="images/";
3
  var images=["cat1.jpg","cat2.jpg","cat3.jpg"];
4
  var index=0;
5
  var ele=document.getElementById("mainImage");
6
  ele.addEventListener("click",function(){
7
    this.src=path+images[++index % images.length];
8
  });
9
};
実行してみて画像をクリックするたびに画像が入れ替われば成功だ。


[ソースコード解説]
●html
13行目:<script src=”js/main.js”></script>で外部jsファイルを読み込む。cssの読み込みはhref,jsの読み込みはsrcであることに注意。scriptの閉じタグは必須。

[練習問題]
Q1.以下のようなショッピングアプリを作ろう。数量を変更するとリアルタイムに合計価格が変わるようにすること。
1.スタート画面

2.個数を入力すると、下部に合計金額が表示される。


[解答例]

●index.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>フルーツショッピング</title>
06
</head>
07
<body>
08
<table>
09
<tr><th>りんご(120円)</th><td><input type="number" class="fruits" value="0">個</td></tr>
10
<tr><th>ばなな(50円)</th><td><input type="number" class="fruits" value="0">個</td></tr>
11
<tr><th>ぶどう(180円)</th><td><input type="number" class="fruits" value="0">個</td></tr>
12
</table>
13
<div id="result"></div>
14
<script src="js/main.js"></script>
15
</body>
16
</html>
●main.js

01
window.onload=function(){
02
  var prices=[120,50,180];
03
  var result=document.getElementById("result");
04
  var fruits=document.getElementsByClassName("fruits");
05
  for(var i=0;i<fruits.length;i++){
06
    fruits[i].addEventListener("change",numberChange);
07
    /*input type numberは現在バグがあるらしので以下二つも記述しておくとよい*/
08
    fruits[i].addEventListener("keyup",numberChange);
09
    fruits[i].addEventListener("mouseup",numberChange);
10
  }
11
  function numberChange(){
12
    var sum=0;
13
    for(var i=0;i<fruits.length;i++){
14
      sum+=fruits[i].value*prices[i];
15
    }
16
    result.textContent=sum+"円です！";
17
  }
18
};
[別解]
data属性を利用すると以下のようにできる
●index2.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>フルーツショッピング</title>
06
</head>
07
<body>
08
<table>
09
<tr>
10
<th>りんご(120円)</th>
11
<td><input type="number" data-price="120" min="0"></td>
12
</tr>
13
<tr>
14
<th>ばなな(50円)</th>
15
<td><input type="number" data-price="50" min="0"></td>
16
</tr>
17
<tr>
18
<th>ぶどう(180円)</th>
19
<td><input type="number" data-price="180"></td>
20
</tr>
21
</table>
22
<div id="result"></div>
23
<script src="js/main2.js"></script>
24
 
25
</body>
26
</html>
●main2.js

01
window.onload=function(){
02
  var result=document.getElementById("result");
03
  var fruits=document.querySelectorAll('[data-price]');
04
  for(var i=0;i<fruits.length;i++){
05
    fruits[i].addEventListener("change",numberChange);
06
    fruits[i].addEventListener("keyup",numberChange);
07
    fruits[i].addEventListener("mouseup",numberChange);
08
  }
09
  function numberChange(){
10
    var sum=0;
11
    for(var i=0;i<fruits.length;i++){
12
      sum+=parseInt(fruits[i].getAttribute('data-price'))*fruits[i].value;
13
    }
14
    result.textContent='合計は'+sum+'円です';
15
    //console.dir(fruits[0]);
16
  }
17
}
Q2.学習の際に役立つ以下のようなアプリを作成しよう。
1.スタート画面

2.灰色部分にマウスを載せると、正解が表示される。

3.さらにクリックすると拡大

4.マウスを外すと元にもどる


[解答例]
●index.html

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8"/>
05
<title>スペイン語速習</title>
06
<link rel="stylesheet" href="css/main.css"/>
07
</head>
08
<body>
09
<div id="container">
10
<p>スペイン語で日曜は<span class="hide">Domingo</span>月曜は<span class="hide">Lunes</span>である。
11
<script src="js/main.js"></script>
12
</body>
13
</html>
●main.css

01
.hide{
02
  display: inline-block;
03
  padding:2px;
04
  color:#aaaaaa;
05
  background: #aaaaaa;
06
  font-size:16px;
07
}
08
.hide:hover{
09
  cursor:pointer;
10
}
●main.js

ソースを表示印刷SyntaxHighlighterについて
01
window.onload=function(){
02
  var hides=document.getElementsByClassName("hide");
03
  for(var i=0;i<hides.length;i++){
04
    hides[i].addEventListener("mouseover",function(){
05
      this.style.color="blue";
06
    });
07
    hides[i].addEventListener("mouseout",function(){
08
      this.style.color="#aaa";
09
      this.style.fontSize="16px";
10
    });
11
    hides[i].addEventListener("click",function(){
12
      this.style.fontSize="40px";
13
    });
14
  }
15
};

★Day60

JSによるゲーム制作-(神経衰弱)

トランプ画像を使って神経衰弱を作ってみよう。

[準備編]
1.まずは以下をダウンロードし、デスクトップに展開する。
Icon
cardgame素材
 1 file(s)    558.42 KB
2.以下のようなフォルダ構成になっている。imagesフォルダにはトランプの画像が入っている。


3.index.htmlはcssファイルとjsファイルの読み込み設定とメインとなるテーブルタグがある。

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8">
05
<link rel="stylesheet" href="css/main.css">
06
<script src="js/main.js"></script>
07
<title>神経衰弱</title>
08
</head>
09
<body>
10
  <!--メインとなるテーブル要素-->
11
  <table id="table" border="1"></table>
12
</body>
13
</html>
4.main.jsはドキュメントの読み込みが完了したら処理を開始する記述をしてある。main.cssは現状空白の状態だ。

1
'use strict';
2
window.onload=function(){
3
 
4
};
[作成]
1.main.jsを以下のように更新する。

01
'use strict';
02
window.onload=function(){
03
  //コンストラクタ作成
04
  function Card(suit,num){
05
    this.suit=suit;
06
    this.num=num;
07
  }
08
  //カード配列作成
09
  const cards=[];
10
  const suits=['s','d','h','c'];
11
  for(let i=0;i<suits.length;i++){
12
    for(let j=1;j<=13;j++){
13
      let card=new Card(suits[i],j);
14
      cards.push(card);
15
    }
16
  }
17
  //テーブル作成
18
  const table=document.getElementById('table');
19
  for(let i=0;i<suits.length;i++){
20
    let tr=document.createElement('tr');
21
    for(let j=0;j<13;j++){
22
      let td=document.createElement('td');
23
      let tempCard=cards[i*13+j];
24
      td.textContent=`${tempCard.suit}:${tempCard.num}`;
25
      tr.appendChild(td);
26
    }
27
    table.appendChild(tr);
28
  }
29
}
2.ブラウザから実行してみよう。以下のように表示されれば成功だ。


[スタイルをあてる]
それでは画像とスタイルを用いてカードの見た目を表現していこう。
1.まずはindex.htmlのtableタグについているborder属性を外す

01
<!DOCTYPE html>
02
<html>
03
<head>
04
<meta charset="UTF-8">
05
<link rel="stylesheet" href="css/main.css">
06
<script src="js/main.js"></script>
07
<title>神経衰弱</title>
08
</head>
09
<body>
10
  <!--メインとなるテーブル要素-->
11
  <!--border属性を外す-->
12
  <table id="table"></table>
13
</body>
14
</html>
2.main.jsを以下のように編集

01
'use strict';
02
window.onload=function(){
03
  function Card(suit,num){
04
    this.suit=suit;
05
    this.num=num;
06
    //以下を追記
07
    this.front;
08
    this.setFront=function(){
09
      this.front=`${this.suit}${this.num<10?'0':''}${this.num}.gif`;
10
    };
11
  }
12
 
13
  const cards=[];
14
  const suits=['s','d','h','c'];
15
  for(let i=0;i<suits.length;i++){
16
    for(let j=1;j<=13;j++){
17
      let card=new Card(suits[i],j);
18
      //以下を追加
19
      card.setFront();
20
      cards.push(card);
21
    }
22
  }
23
  const table=document.getElementById('table');
24
  for(let i=0;i<suits.length;i++){
25
    let tr=document.createElement('tr');
26
    for(let j=0;j<13;j++){
27
      let td=document.createElement('td');
28
      let tempCard=cards[i*13+j];
29
      //以下を追記
30
      td.classList.add('card');
31
      td.style.backgroundImage=`url(images/${tempCard.front})`;
32
      //以下をコメントアウト(または削除)
33
      //td.textContent=`${tempCard.suit}:${tempCard.num}`;
34
      tr.appendChild(td);
35
    }
36
    table.appendChild(tr);
37
  }
38
}
3.main.cssを以下のように編集

01
body{
02
  background-color:lightgreen;
03
}
04
table{
05
  margin:10px auto;
06
}
07
td.card{
08
  width:80px;
09
  height:120px;
10
  margin:2px;
11
  background-size:cover;
12
}
4.実行してみよう以下のように表示されれば成功だ。


[シャッフル]
トランプをランダムに並べてみよう。
1.main.jsに以下を追記

01
'use strict';
02
window.onload=function(){
03
  function Card(suit,num){
04
    this.suit=suit;
05
    this.num=num;
06
    this.front;
07
    this.setFront=function(){
08
      this.front=`${this.suit}${this.num<10?'0':''}${this.num}.gif`;
09
    };
10
  }
11
 
12
  const cards=[];
13
  const suits=['s','d','h','c'];
14
  for(let i=0;i<suits.length;i++){
15
    for(let j=1;j<=13;j++){
16
      let card=new Card(suits[i],j);
17
      card.setFront();
18
      cards.push(card);
19
    }
20
  }
21
  //以下を追記
22
  function shuffle(){
23
    let i=cards.length;
24
    while(i){
25
      let index=Math.floor(Math.random()*i--);
26
      var temp=cards[index];
27
      cards[index]=cards[i];
28
      cards[i]=temp;
29
    }
30
  }
31
  shuffle();//シャッフル実行
32
  const table=document.getElementById('table');
33
  for(let i=0;i<suits.length;i++){
34
    let tr=document.createElement('tr');
35
    for(let j=0;j<13;j++){
36
      let td=document.createElement('td');
37
      let tempCard=cards[i*13+j];
38
      td.classList.add('card');
39
      td.style.backgroundImage=`url(images/${tempCard.front})`;
40
      tr.appendChild(td);
41
    }
42
    table.appendChild(tr);
43
  }
44
}
2.実行してみよう。シャッフルのアルゴリズムによりカードがランダムに並ぶようになった。

[最初は裏面表示にする]
1.まずはmain.cssを以下のように変更

01
body{
02
  background-color:lightgreen;
03
}
04
table{
05
  margin:10px auto;
06
}
07
td.card{
08
  width:80px;
09
  height:120px;
10
  margin:2px;
11
  background-size:cover;
12
}
13
/*以下を追記*/
14
td.card.back{
15
  background-image:url(../images/z01.gif) !important;
16
}
2.次にmain.jsを変更する。といってもclassListにaddしている部分にbackを追加するだけだ。

01
'use strict';
02
window.onload=function(){
03
  function Card(suit,num){
04
    this.suit=suit;
05
    this.num=num;
06
    this.front;
07
    this.setFront=function(){
08
      this.front=`${this.suit}${this.num<10?'0':''}${this.num}.gif`;
09
    };
10
  }
11
 
12
  const cards=[];
13
  const suits=['s','d','h','c'];
14
  for(let i=0;i<suits.length;i++){
15
    for(let j=1;j<=13;j++){
16
      let card=new Card(suits[i],j);
17
      card.setFront();
18
      cards.push(card);
19
    }
20
  }
21
  function shuffle(){
22
    let i=cards.length;
23
    while(i){
24
      let index=Math.floor(Math.random()*i--);
25
      var temp=cards[index];
26
      cards[index]=cards[i];
27
      cards[i]=temp;
28
    }
29
  }
30
  shuffle();
31
  const table=document.getElementById('table');
32
  for(let i=0;i<suits.length;i++){
33
    let tr=document.createElement('tr');
34
    for(let j=0;j<13;j++){
35
      let td=document.createElement('td');
36
      let tempCard=cards[i*13+j];
37
      //backを追加
38
      td.classList.add('card','back');
39
      td.style.backgroundImage=`url(images/${tempCard.front})`;
40
      tr.appendChild(td);
41
    }
42
    table.appendChild(tr);
43
  }
44
}
3.実行してみよう。すべて裏面が表示されるはずだ。jsによって設定したstyleはインラインに記述されるため、それを覆すにはimportant設定が必要となる。

[クリックしたら表になる挙動の作成]
1.現状classListにbackが入っているときは裏、そうでないときは表が表示される。
まずはclickイベントを作成し、backをtoggleしてみよう。
main.jsを以下のように変更

01
'use strict';
02
window.onload=function(){
03
  function Card(suit,num){
04
    this.suit=suit;
05
    this.num=num;
06
    this.front;
07
    this.setFront=function(){
08
      this.front=`${this.suit}${this.num<10?'0':''}${this.num}.gif`;
09
    };
10
  }
11
  const cards=[];
12
  const suits=['s','d','h','c'];
13
  for(let i=0;i<suits.length;i++){
14
    for(let j=1;j<=13;j++){
15
      let card=new Card(suits[i],j);
16
      card.setFront();
17
      cards.push(card);
18
    }
19
  }
20
  function shuffle(){
21
    let i=cards.length;
22
    while(i){
23
      let index=Math.floor(Math.random()*i--);
24
      var temp=cards[index];
25
      cards[index]=cards[i];
26
      cards[i]=temp;
27
    }
28
  }
29
  shuffle();
30
  const table=document.getElementById('table');
31
  for(let i=0;i<suits.length;i++){
32
    let tr=document.createElement('tr');
33
    for(let j=0;j<13;j++){
34
      let td=document.createElement('td');
35
      let tempCard=cards[i*13+j];
36
      td.classList.add('card','back');
37
      //以下を追加
38
      td.onclick=flip;
39
      td.style.backgroundImage=`url(images/${tempCard.front})`;
40
      tr.appendChild(td);
41
    }
42
    table.appendChild(tr);
43
  }
44
  //flipの作成
45
  function flip(e){
46
    let td=e.target;
47
    td.classList.toggle('back');
48
  }
49
 
50
}
2.カードをクリックしてみよう。backクラスがついたり外れたりして表示が切り替わるはずだ。

[１枚目のカードと2枚目のカードが同じ数字だったら表のままにする]
いよいよ神経衰弱をつくっていこう。
クリックされたカードが１枚目なのか2枚目なのかをどう判定するか・・・
今回はfirstCardという変数を用意し、それがnullかどうかで判定することとする。

1.main.jsを以下のように変更。

ソースを表示印刷SyntaxHighlighterについて
01
'use strict';
02
window.onload=function(){
03
  function Card(suit,num){
04
    this.suit=suit;
05
    this.num=num;
06
    this.front;
07
    this.setFront=function(){
08
      this.front=`${this.suit}${('0'+this.num).slice(-2)}.gif`;
09
    };
10
  }
11
  const cards=[];
12
  const suits=['s','d','h','c'];
13
  for(let i=0;i<suits.length;i++){
14
    for(let j=1;j<=13;j++){
15
      let card=new Card(suits[i],j);
16
      card.setFront();
17
      cards.push(card);
18
    }
19
  }
20
  function shuffle(){
21
    let i=cards.length;
22
    while(i){
23
      let index=Math.floor(Math.random()*i--);
24
      var temp=cards[index];
25
      cards[index]=cards[i];
26
      cards[i]=temp;
27
    }
28
  }
29
  shuffle();
30
  const table=document.getElementById('table');
31
  for(let i=0;i<suits.length;i++){
32
    let tr=document.createElement('tr');
33
    for(let j=0;j<13;j++){
34
      let td=document.createElement('td');
35
      let tempCard=cards[i*13+j];
36
      td.classList.add('card','back');
37
      td.onclick=flip;
38
      //以下を追加
39
      td.num=tempCard.num;
40
      td.style.backgroundImage=`url(images/${tempCard.front})`;
41
      tr.appendChild(td);
42
    }
43
    table.appendChild(tr);
44
  }
45
  //以下の変数を追加
46
  let firstCard=null;
47
  let flipTimerId=NaN;
48
  function flip(e){
49
    let td=e.target;
50
    //下の一行をコメントアウト
51
    //td.classList.toggle('back');
52
    //以下を追記
53
    if(!td.classList.contains('back') || flipTimerId){
54
      return;//表のカードをクリックしても何もしない。
55
    }
56
    td.classList.remove('back');//カードを表にする。
57
    if(firstCard===null){
58
      firstCard=td;//1枚目だったら今めくったカードをfirstCardに設定
59
    }else{
60
      //2枚目だったら1枚目と比較して結果を判定する。
61
      if(firstCard.num===td.num){
62
        //２枚が同じだったときの処理
63
        firstCard=null;
64
      }else{
65
        flipTimerId=setTimeout(function(){
66
          firstCard.classList.add('back');
67
          td.classList.add('back');
68
          flipTimerId=NaN;
69
          firstCard=null;
70
        },1200);
71
      }
72
 
73
 
74
    }
75
  }
76
}

Webサイト制作-10日目(JSON)

この講座でも汎用データフォーマットとしてCSVは何度か登場しているし、アンドロイド制作のレイアウトを作る際にはxmlを利用してきた。そして今回はJSONを扱う。JSONとは(JavaScript Object Notation)の略でJSのオブジェクト記法をもとにした汎用データ・フォーマットだ。シンプルでわかりやすくオブジェクトを表現できるので昨今人気は大爆発している。
今回はこのJSONについてしっかりと学ぼう。

●JS基本
JSONはJavaScriptの文法に基づいている。まずはJSの文法から確認しよう。
[オブジェクト]

1
var obj={name:'山田',age:27}
波括弧で囲うことでオブジェクトを表し、あとはその中にkey:valueの組み合わせでプロパティを記述していく。
[配列]

1
var arr=['red','green','blue']
直カッコで囲い、その中に要素を列挙していくことで配列を表現できる。

●JSON
JSONは上のJS基本のルールに基づいて記述していく。

1
{
2
"Beatles":[
3
  {"name":"John","age":33},
4
  {"name":"Paul","age":32},
5
  {"name":"George","age":30},
6
  {"name":"Ringo","age":29}
7
  ]
8
}
まず大外が{}なのでオブジェクトが一つある。そのオブジェクトにはBeatlesというプロパティが定義されていてその値が[]で囲われているつまり配列だ。ここまでで「Beatlesは配列ですよ」という意味になる。で配列の中を見てみると
{}で囲われた部分が４つある。つまり「Beatlesてのは配列でその要素は４つのオブジェクトです。」となる。
さらにその一つ一つのオブジェクトに目を向けると
1つ目のオブジェクトはnameがJohnでageが33,
2つ目のオブジェクトはnameがPaulでageが32,
3つ目のオブジェクトはnameがGeorgeでageが30,
4つ目のオブジェクトはnameがRingoでageが29,
ということがわかる。
どうだろう、ビートルズの構成がこのシンプルな記述に無駄なく収まっていることが感じ取れるのではないだろうか？

この構成をxmlで記述すると以下のようになる。

01
<?xml version="1.0" ?>
02
<Beatles>
03
  <person>
04
    <name>John</name>
05
    <age>33</age>
06
  </person>
07
  <person>
08
    <name>Paul</name>
09
    <age>32</age>
10
  </person>
11
  <person>
12
    <name>George</name>
13
    <age>30</age>
14
  </person>
15
  <person>
16
    <name>Ringo</name>
17
    <age>29</age>
18
  </person>
19
</Beatles>
JSONに比べると若干冗長な感じがする。
JSONのシンプルでわかりやすい記述が人気が出るのもわかるであろう。

●注意点
シンプルに記述できるので便利なのだが気をつける点が２点ある。
1.プロパティや文字列は””(ダブルコーテーション)でくくる。
jsであれば以下は全部OKだ。

1
var arr1={name:'hoge',age:33};
2
var arr2={'name':'hoge','age':33};
3
var arr3={"name":"hoge","age":33};
JSONは一択だ。

1
{"name":"hoge","age":33}
2.余計なカンマは許されない。
jsであれば、配列の次の要素がない場合も,をつけることができる。

1
var arr=['red','green','blue',]；
blueの後に要素がないが問題ない、要素数も3だ。
ただ、JSONは許されない。必ず以下のように書かなければならない。

1
["red","green","blue"]
●大切な確認
このように細かいとこにシビアなJSONは、文法的に正しいかどうかをまず確認することが大切だ。

JSONきれい

私は上記のサイトをいつも利用させていただいている。自分でJSONを書いた場合はもちろんのことWebAPIなどから取得したJSONも貼り付けて試してみるといいだろう。そもそも間違えている場合などもある。

●値
最後に値について確認する。

01
{
02
  "name":"John",
03
  "age":33,
04
  "height":180.3,
05
  "favoriteWord":null,
06
  "isRightHanded":true,
07
  "isLeftHanded":false,
08
  "wife":{"name":"Yoko","age":32},
09
  "part":["vocal","guitar"]
10
}
上から順に文字列、整数、実数、null,true,false,配列、オブジェクト
値として指定できるのは以上が全てだ。

基本を学んだので自分でJSONを書いてみよう。

　Q1.以下のデータをJSONで記せ。

和名	英名	コード	心理効果
赤	Red	#ff0000	活力を感じ気持ちを前向きにさせる。
アドレナリンを分泌し興奮を促す。
熱や暖かさを感じる。
食欲を増進させる。
時間経過を早く感じさせる。
目を引き関心を集める。
緑	Green	#00ff00	心や身体の疲れをいやす。
疲れた目を休ませる。
鎮静作用で緊張を緩和する。
リラックスの作用がある。
穏やかな気持ちを与える。
青	Blue	#0000ff	集中力を高める。
食欲をコントロールできる。
興奮を抑え、気持ちを落ち着かせる。
時間経過を遅く感じる。
睡眠を促進する。
[解答例]

ソースを表示印刷SyntaxHighlighterについて
01
[
02
{
03
"和名":"赤",
04
"英名":"Red",
05
"コード":"#ff0000",
06
"心理的効果":[
07
              "活力を感じ気持ちを前向きにさせる。",
08
              "アドレナリンを分泌し興奮を促す。",
09
              "熱や暖かさを感じる。",
10
              "食欲を増進させる。",
11
              "時間経過を早く感じさせる。",
12
              "目を引き関心を集める。"
13
              ]
14
},
15
{
16
"和名":"緑",
17
"英名":"Green",
18
"コード":"#00ff00",
19
"心理的効果":[
20
              "心や身体の疲れをいやす。",
21
              "疲れた目を休ませる。",
22
              "鎮静作用で緊張を緩和する。",
23
              "リラックスの作用がある。",
24
              "穏やかな気持ちを与える。"
25
              ]
26
},
27
{
28
"和名":"青",
29
"英名":"Blue",
30
"コード":"#0000ff",
31
"心理的効果":[
32
              "集中力を高める。",
33
              "食欲をコントロールできる。",
34
              "興奮を押さえ、気持ちを落ち着かせる。",
35
              "時間経過を遅く感じる。",
36
              "睡眠を促進する。"
37
              ]
38
}
39
]

JSP & Servlet(webAPIを利用したアプリ)

星をみるひと APIが提供してくれているAPIを利用してWebアプリケーションを作成しよう。

まずは以下のサンプルリクエストを実行してみて返却されるJSONを確認する。
https://livlog.xyz/hoshimiru/constellation?lat=35.6581&lng=139.7414&date=2020-01-15&hour=20&min=00
今回は以下の赤で囲った部分の情報を使うことにする。


[作成]
・eclipse新規動的プロジェクトから「starapp」を作成する。
・GsonでJsonパースを行いたいので以下のファイルをWEB-INF/libの中に貼り付ける。
Icon
下からダウンロード
 1 file(s)    227.17 KB
モデル
・modelパッケージ内にStar.javaを以下のように作成する。
Jsonデータの使いたい項目をフィールドにもつbeanだ。
●model.Star.java

01
package model;
02
 
03
import java.io.Serializable;
04
 
05
public class Star implements Serializable{
06
  private String enName;
07
  private String jpName;
08
  private String origin;
09
  private String starImage;
10
   
11
  public Star(){}
12
 
13
  public String getEnName() {
14
    return enName;
15
  }
16
 
17
  public void setEnName(String enName) {
18
    this.enName = enName;
19
  }
20
 
21
  public String getJpName() {
22
    return jpName;
23
  }
24
 
25
  public void setJpName(String jpName) {
26
    this.jpName = jpName;
27
  }
28
 
29
  public String getOrigin() {
30
    return origin;
31
  }
32
 
33
  public void setOrigin(String origin) {
34
    this.origin = origin;
35
  }
36
 
37
  public String getStarImage() {
38
    return starImage;
39
  }
40
 
41
  public void setStarImage(String starImage) {
42
    this.starImage = starImage;
43
  }
44
   
45
}
通信をしてJsonを取得し、パースを行うStarParser.javaをmodelの中に作成する。
●model.StarParser.java

01
package model;
02
 
03
import java.io.IOException;
04
import java.io.InputStream;
05
import java.io.InputStreamReader;
06
import java.net.HttpURLConnection;
07
import java.net.MalformedURLException;
08
import java.net.URL;
09
import java.util.ArrayList;
10
import java.util.List;
11
 
12
import com.google.gson.Gson;
13
import com.google.gson.JsonArray;
14
import com.google.gson.JsonObject;
15
import com.google.gson.stream.JsonReader;
16
 
17
public class StarParser {
18
  public List<Star> getList(String urlString){
19
    //作成したいlistをnew
20
    List<Star> list=new ArrayList<>();
21
    //スコープをあげるためここで宣言
22
    JsonReader reader=null;
23
    HttpURLConnection con=null;
24
    try {
25
      //urlの文字列からURLインスタンスを作成
26
      URL url=new URL(urlString);
27
      //openConnectionで接続
28
      con=(HttpURLConnection) url.openConnection();
29
      //GETによるリクエスト
30
      con.setRequestMethod("GET");
31
      //データ取得
32
      InputStream is=con.getInputStream();
33
      //スプーンからコップで効率化
34
      InputStreamReader isr=new InputStreamReader(is,"UTF-8");
35
      //インプットストリームリーダーインスタンスからJsonReadrインスタンスを作成できる。
36
      reader=new JsonReader(isr);
37
      //GsonをnewしてfromJsonメソッドを用いてルート要素を取得する(今回ルートはオブジェクト)
38
      JsonObject root=new Gson().fromJson(reader, JsonObject.class);
39
      //root要素にあるresultプロパティを取得(配列)
40
      JsonArray result=root.get("result").getAsJsonArray();
41
      //配列とforは刺身と醤油。JsonArrayはsize()で要素数取得
42
      for(int i=0;i<result.size();i++){
43
        //Starインスタンスをnew
44
        Star star=new Star();
45
        //JsonArrayからはget(index)で要素を取得できる(オブジェクト)
46
        JsonObject sObj=result.get(i).getAsJsonObject();
47
        //取り出したオブジェクトの情報をStarインスタンスに詰める
48
        star.setEnName(sObj.get("enName").getAsString());
49
        star.setJpName(sObj.get("jpName").getAsString());
50
        star.setOrigin(sObj.get("origin").getAsString());
51
        star.setStarImage(sObj.get("starImage").getAsString());
52
        //Starインスタンスに全ての情報が入ったのでリストにadd
53
        list.add(star);
54
      }
55
    } catch (MalformedURLException e) {
56
      e.printStackTrace();
57
    } catch (IOException e) {
58
      e.printStackTrace();
59
    }finally{
60
      if(reader != null){
61
        try {
62
          reader.close();
63
        } catch (IOException e) {
64
          e.printStackTrace();
65
        }
66
      }
67
      if(con !=null){
68
        con.disconnect();
69
      }
70
    }
71
    return list;
72
  }
73
}
コントローラー
・リクエストを処理するコントローラーを作成する。
controllerパッケージ内にMain.javaを以下のように作成する。
●controller.Main.java

01
package controller;
02
 
03
import java.io.IOException;
04
import java.text.SimpleDateFormat;
05
import java.util.Date;
06
import java.util.List;
07
 
08
import javax.servlet.RequestDispatcher;
09
import javax.servlet.ServletException;
10
import javax.servlet.annotation.WebServlet;
11
import javax.servlet.http.HttpServlet;
12
import javax.servlet.http.HttpServletRequest;
13
import javax.servlet.http.HttpServletResponse;
14
 
15
import model.Star;
16
import model.StarParser;
17
 
18
@WebServlet("/Main")
19
public class Main extends HttpServlet {
20
  private static final long serialVersionUID = 1L;
21
  //東京の緯度(LAT)経度(LNG)
22
  private static final String LAT="35.709026";
23
  private static final String LNG="139.731992";
24
        
25
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
26
    //現在時刻をもとにクエリパラメーターを作成
27
    Date date=new Date();//実行日時の情報を持つDateインスタンス作成
28
    SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");//クエリパラメータに合わせたフォーマット作成
29
    String today=sdf.format(date);//フォーマットされた文字列を得る。
30
    sdf=new SimpleDateFormat("H");//時刻(0~23)
31
    String hour=sdf.format(date);
32
    sdf=new SimpleDateFormat("m");//分(0~59)
33
    String min=sdf.format(date);
34
   
35
     
36
    //クエリパラメータをもとにリクエストurlを作成する
37
    String url="https://app.cotogoto.ai/hoshimiru/constellation?lat="+LAT+"&lng="+LNG+"&date="+today+"&hour="+hour+"&min="+min;
38
     
39
    //パーサーにurlを渡しリストを得る
40
    StarParser parser=new StarParser();
41
    List<Star> list=parser.getList(url);
42
     
43
    //viewで使う情報をリクエストスコープに詰める
44
    request.setAttribute("list",list);
45
    request.setAttribute("today",today);
46
    request.setAttribute("hour",hour);
47
    request.setAttribute("min",min);
48
    request.setAttribute("lat",LAT);
49
    request.setAttribute("lng",LNG);
50
     
51
    //フォーワード
52
    RequestDispatcher rd=request.getRequestDispatcher("/WEB-INF/view/main.jsp");
53
    rd.forward(request, response);
54
     
55
  }
56
}
　

ビュー　
・WEB-INFフォルダの中にviewフォルダを作成し、その中にmain.jspを以下のように作成する。
●WEB-INF/view/main.jsp

01
<%@ page language="java" contentType="text/html; charset=UTF-8"
02
    pageEncoding="UTF-8" import="java.util.*,model.*"%>
03
<%
04
List<Star> list=(List<Star>)request.getAttribute("list");
05
String today=(String)request.getAttribute("today");
06
String hour=(String)request.getAttribute("hour");
07
String min=(String)request.getAttribute("min");
08
String lat=(String)request.getAttribute("lat");
09
String lng=(String)request.getAttribute("lng");
10
%>
11
     
12
<!DOCTYPE html>
13
<html>
14
<head>
15
<meta charset="UTF-8"/>
16
<title>StarApp</title>
17
<style>
18
#container{
19
  width:80%;
20
  margin:0 auto;
21
}
22
.starBox{
23
  padding-bottom:20px;
24
  border-bottom:1px solid #aaa;
25
}
26
.imageBox img{
27
  display:block;
28
  width:100%;
29
}
30
 
31
 
32
</style>
33
</head>
34
<body>
35
<div id="container">
36
<h1>東京で見られる現在の星座</h1>
37
<table border="1">
38
<tr><th>日付</th><td><%=today %></td></tr>
39
<tr><th>時刻</th><td><%=hour %>時<%=min %>分</td></tr>
40
<tr><th>緯度</th><td><%=lat %></td></tr>
41
<tr><th>経度</th><td><%=lng %></td></tr>
42
</table>
43
<%if(list != null && list.size()>0){ %>
44
 
45
<%for(Star s:list){ %>
46
 
47
<div class="starBox">
48
<h2><%=s.getJpName() %>(<%=s.getEnName() %>)</h2>
49
<div class="imageBox">
50
<img src="<%=s.getStarImage() %>">
51
</div>
52
<h3>[由来]</h3>
53
<p><%=s.getOrigin() %></p>
54
</div>
55
<%} %>
56
<%} %>
57
</div>
58
</body>
59
</html>
[完成]
実行してみよう。以下のような表示がされれば成功だ。

★Day61

JSP & Servlet-13日目(WebAPIの利用、JSONパース)

お天気情報をJSONでくれるWebAPIがあるので、それを利用してお天気アプリを作成しよう。

WebAPI確認
1.まずはWebAPIから吐き出されるJSONを確認しよう。
今回はlivedoorから提供されているWeather Hacks
のAPIを使用する。まずは東京のお天気情報のリクエストURLを叩いてレスポンスを確認しよう。
http://weather.livedoor.com/forecast/webservice/json/v1?city=130010

まるっとコピーしてJSON整形サイトで確認してもよいが、吐き出す内容が多いのでChromeにプラグインとしてインストールしたJSON formatterで確認してみる。

要素を折りたたむことができるので全体像をつかむのに便利だ。

2.アプリの仕様を決める。
すべての要素を盛り込んでアプリを作ってもいいが、今回は送信されるデータのうち、title,description,forecastsを利用することとする。

アプリ作成
下準備
1.エクリプス、新規動的Webプロジェクトから[joytas13]アプリを作成する。
2.GsonでJsonパースを行いたいので以下のファイルをWEB-INF/libの中に貼り付ける。
Icon
下からダウンロード
 1 file(s)    227.17 KB
model
1.Jsonデータとにらめっこしながらmodelを作成する。今回は以下のような３つのクラスを作成した。
●model.Image.java(forecastがもっている画像情報クラス)

01
package model;
02
 
03
import java.io.Serializable;
04
 
05
public class Image implements Serializable{
06
  /*
07
  "width": 50,
08
  "url": "http://weather.livedoor.com/img/icon/15.gif",
09
  "title": "雨",
10
  "height": 31
11
  */
12
  private int width;
13
  private String url;
14
  private String title;
15
  private int height;
16
  public Image(){}
17
  public int getWidth() {
18
    return width;
19
  }
20
  public void setWidth(int width) {
21
    this.width = width;
22
  }
23
  public String getUrl() {
24
    return url;
25
  }
26
  public void setUrl(String url) {
27
    this.url = url;
28
  }
29
  public String getTitle() {
30
    return title;
31
  }
32
  public void setTitle(String title) {
33
    this.title = title;
34
  }
35
  public int getHeight() {
36
    return height;
37
  }
38
  public void setHeight(int height) {
39
    this.height = height;
40
  }
41
   
42
   
43
}
●model.Forecast.java(１日分のお天気データクラス)
（Jsonにあるtemperatureは今回不使用）

01
package model;
02
 
03
import java.io.Serializable;
04
/*
05
 * {
06
"dateLabel": "今日",
07
"telop": "雨",
08
"date": "2017-09-17",
09
"temperature": {
10
"min": null,
11
"max": null
12
},
13
"image": {
14
"width": 50,
15
"url": "http://weather.livedoor.com/img/icon/15.gif",
16
"title": "雨",
17
"height": 31
18
}
19
}
20
 */
21
 
22
public class Forecast implements Serializable{
23
  private String dateLabel;
24
  private String telop;
25
  private String date;
26
  private Image image;
27
  public Forecast(){}
28
  public String getDateLabel() {
29
    return dateLabel;
30
  }
31
  public void setDateLabel(String dateLabel) {
32
    this.dateLabel = dateLabel;
33
  }
34
  public String getTelop() {
35
    return telop;
36
  }
37
  public void setTelop(String telop) {
38
    this.telop = telop;
39
  }
40
  public String getDate() {
41
    return date;
42
  }
43
  public void setDate(String date) {
44
    this.date = date;
45
  }
46
  public Image getImage() {
47
    return image;
48
  }
49
  public void setImage(Image image) {
50
    this.image = image;
51
  }
52
   
53
}
●model.Weather.java(本体となるクラス、３日分の天気などをhas-aで持つ)
(使いたい部分を抽出してクラスのフィールドとする)

01
package model;
02
 
03
import java.io.Serializable;
04
/*
05
 * "pinpointLocations": [],
06
"link": "http://weather.livedoor.com/area/forecast/130010",
07
"forecasts": [],
08
"location": {},
09
"publicTime": "2017-09-17T17:00:00+0900",
10
"copyright": {},
11
"title": "東京都 東京 の天気",
12
"description": {
13
"text": " 前線が日本の南に停滞しています。また、大型の台風第18号が四国の南\n西海上にあって、北東へ進んでいます。\n\n【関東甲信地方】\n 関東甲信地方は、おおむね雨となっています。\n\n 17日は、前線や台風の影響によりおおむね雨となり、雷を伴い非常に激\nしく降る所がある見込みです。\n\n 18日は、前線や台風の影響により、はじめは雨で雷を伴い非常に激しく\n降る所がありますが、次第に晴れるでしょう。\n\n 関東近海では、18日にかけて、うねりを伴い大しけとなる見込みです。\n船舶は高波に警戒してください。\n\n【東京地方】\n 17日は、雨で夜は雷を伴い激しく降る所があるでしょう。\n 18日は、曇り後晴れで、明け方まで雨で雷を伴い激しく降る所がある見\n込みです。",
14
"publicTime": "2017-09-17T16:55:00+0900"
15
}
16
 */
17
 
18
public class Weather implements Serializable{
19
  private String title;
20
  private String description;
21
  private Forecast[] forecasts;
22
  public Weather(){}
23
  public String getTitle() {
24
    return title;
25
  }
26
  public void setTitle(String title) {
27
    this.title = title;
28
  }
29
  public String getDescription() {
30
    return description;
31
  }
32
  public void setDescription(String description) {
33
    this.description = description;
34
  }
35
  public Forecast[] getForecasts() {
36
    return forecasts;
37
  }
38
  public void setForecasts(Forecast[] forecasts) {
39
    this.forecasts = forecasts;
40
  }
41
   
42
}
controller
1.リクエストを処理するコントローラーを以下のように作成する。
[処理の流れ]
WebAPIにHttpリクエストを投げて、その結果(Json)をInputStreamで取得。
取得したデータをGsonでパースしてWeatherオブジェクトを生成し、リクエストスコープに詰めている。

なお、Jsonに含まれる改行コードの部分をbrタグに変換するメソッドを別メソッドにしている。
(こうすることで改行コード部分をHtml上で改行させることができる）
●controller.Main.java(Servlet)

01
package controller;
02
 
03
import java.io.IOException;
04
import java.io.InputStream;
05
import java.io.InputStreamReader;
06
import java.net.HttpURLConnection;
07
import java.net.URL;
08
 
09
import javax.servlet.RequestDispatcher;
10
import javax.servlet.ServletException;
11
import javax.servlet.annotation.WebServlet;
12
import javax.servlet.http.HttpServlet;
13
import javax.servlet.http.HttpServletRequest;
14
import javax.servlet.http.HttpServletResponse;
15
 
16
import com.google.gson.Gson;
17
import com.google.gson.JsonArray;
18
import com.google.gson.JsonObject;
19
import com.google.gson.stream.JsonReader;
20
 
21
import model.Forecast;
22
import model.Image;
23
import model.Weather;
24
 
25
/**
26
 * Servlet implementation class Main
27
 */
28
@WebServlet("/Main")
29
public class Main extends HttpServlet {
30
  private static final long serialVersionUID = 1L;
31
 
32
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
33
    //webAPIのurlからURLインスタンスを作成
34
    URL url=new URL("http://weather.livedoor.com/forecast/webservice/json/v1?city=130010");
35
    //GETでの通信処理
36
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
37
    con.setRequestMethod("GET");
38
    //InputStreamで結果を取得
39
    InputStream is=con.getInputStream();
40
    //スプーンからスコップ
41
    InputStreamReader isr=new InputStreamReader(is,"UTF-8");
42
    //ファイル読み込み時にはBufferedReaderだがここではJsonReaderインスタンスを取得する。
43
    JsonReader reader=new JsonReader(isr);
44
    //ルートが{}なのでオブジェクトとして取得
45
    JsonObject root=new Gson().fromJson(reader,JsonObject.class);
46
    //結果として必要となるWeatherインスタンスをnew(フィールドの値はすべてnull)
47
    Weather w=new Weather();
48
    //Jsonからプロパティがtitleの項目を探してきてそれをStringに変換してwにセットする。
49
    w.setTitle(root.get("title").getAsString());
50
    //descriptionはオブジェクトを値として持っているのでまずはそれを取得し、その中にあるtextを取得(メソッドチェーン)
51
    //結果の文字列に改行文字が含まれているのでそれを<br>という文字列に変換しておく。(メソッドは下部にある)
52
    w.setDescription(nl2br(root.get("description").getAsJsonObject().get("text").getAsString()));
53
    //forecastsは配列なので配列として取得
54
    JsonArray fArray=root.get("forecasts").getAsJsonArray();
55
    //Forecast型のインスタンスを格納する配列を準備
56
    Forecast[] forecasts=new Forecast[fArray.size()];
57
    //配列とforは刺身と醤油の相性。JsonArrayの要素数はsize()で求められる
58
    for(int i=0;i<fArray.size();i++) {
59
      //配列の要素一つ一つはオブジェクトなのでそれを取得
60
      JsonObject fObj=fArray.get(i).getAsJsonObject();
61
      //取得した情報をもとにインスタンスを生成したいのでまずはフィールドがnullの状態でnew
62
      Forecast f=new Forecast();
63
      //JSONから情報を取得し、fにセットしていく
64
      f.setTelop(fObj.get("telop").getAsString());
65
      f.setDateLabel(fObj.get("dateLabel").getAsString());
66
      f.setDate(fObj.get("date").getAsString());
67
      //パラメータimageはオブジェクトなのでJsonオブジェクトとして取得
68
      JsonObject iObj=fObj.get("image").getAsJsonObject();
69
      //その情報をもとにインスタンスを作りたいのでまずはnew
70
      Image image=new Image();
71
      //情報をもとにimageに詰める
72
      image.setHeight(iObj.get("height").getAsInt());
73
      image.setTitle(iObj.get("title").getAsString());
74
      image.setUrl(iObj.get("url").getAsString());
75
      image.setWidth(iObj.get("width").getAsInt());
76
      //image要素ができたのでfにセットする
77
      f.setImage(image);
78
      //fが一つできたので配列にセットする
79
      forecasts[i]=f;
80
    }
81
    //for文が回り終わるとすべてのforecastインスタンスが詰まっているのでおおもとのwにセット
82
    w.setForecasts(forecasts);
83
    //完成したw(Weater)インスタンスをリクエストスコープに詰める
84
    request.setAttribute("weather", w);
85
    //フォワード処理
86
    RequestDispatcher rd=request.getRequestDispatcher("/WEB-INF/view/main.jsp");
87
    rd.forward(request,response);
88
 
89
  }
90
 
91
  //文字列に含まれる改行コードを<br>タグに置き換えるメソッド
92
    public static String nl2br(String str) {
93
        if (str == null || str.equals("")) {
94
          return "";
95
        }
96
        str = str.replace("\n", "<br>");
97
        return str;
98
      }
99
}
view
1.modelとcontrollerの連携により欲しいデータが作れたので後はviewで表示するだけだ。
いつものように/WEB-INF/の中にviewフォルダを作ってmain.jspを配置しよう。
●/WEB-INF/view/main.jsp

01
<%@ page language="java" contentType="text/html; charset=UTF-8"
02
    pageEncoding="UTF-8" import="model.*"%>
03
<%
04
Weather w=(Weather)request.getAttribute("weather");
05
 
06
%>
07
<!DOCTYPE html>
08
<html>
09
<head>
10
<meta charset="UTF-8"/>
11
<title><%=w.getTitle() %></title>
12
</head>
13
<body>
14
<h1><%=w.getTitle() %></h1>
15
<p><%=w.getDescription() %></p>
16
<table border="1">
17
<%for(Forecast f:w.getForecasts()) {%>
18
<tr>
19
<td><%=f.getDateLabel() %></td>
20
<td><%=f.getTelop() %></td>
21
<td><%=f.getDate() %></td>
22
<%Image image=f.getImage(); %>
23
<td><img src="<%=image.getUrl()%>" width="<%=image.getWidth() %>" height="<%=image.getHeight() %>" alt="<%=image.getTitle()%>"></td>
24
</tr>
25
<%} %>
26
</table>
27
</body>
28
</html>
完成品
1.以下のように東京の３日分(時間帯によっては2日分)のお天気情報が表示されれば成功だ。

JSP & Servlet(BMI-API作成)

リクエストパラーメータで身長と体重を受け取るとBMIを測定し、その結果を以下のようなJSONで返却するWEB-APIを作成してみよう。なお、送信されるデータのBMIは小数点以下2桁とすること。


その際に結果に応じて6種類の画像パスも送信する。


送信する画像は以下からダウンロード。送信する画像パスの種別は画像下にあるbmi値によって振り分けること

Icon
bmi画像
 1 file(s)    215.70 KB
作例
1.エクリプスにて新規->動的ＷＥＢプロジェクトを選択。名前をBMI_APIとして作成する。

2.GsonでJsonパースを行いたいので以下のファイルをWEB-INF/libの中に貼り付ける

Icon
下からダウンロード
 1 file(s)    227.17 KB
2.新規->クラスからBMIクラスを作成する。その際パッケージ名はmodelとすること

package model;

import java.io.Serializable;

public class BMI implements Serializable{
	private double height;
	private double weight;
	private double bmi;
	private String imgPath;
	public BMI() {}
	public double getHeight() {
		return height;
	}
	public void setHeight(double height) {
		this.height = height;
	}
	public double getWeight() {
		return weight;
	}
	public void setWeight(double weight) {
		this.weight = weight;
	}
	public double getBmi() {
		return bmi;
	}
	public void setBmi(double bmi) {
		this.bmi = bmi;
	}
	public String getImgPath() {
		return imgPath;
	}
	public void setImgPath(String imgPath) {
		this.imgPath = imgPath;
	}

}
3.新規->サーブレットからGetData.javaを作成する。その際パッケージ名はcontrollerとすること。

package controller;
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;

import model.BMI;

@WebServlet("/GetData")
public class GetData extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		String heightStr=request.getParameter("height");
		String weightStr=request.getParameter("weight");

		heightStr=heightStr==null? "1":heightStr;
		weightStr=weightStr==null? "0":weightStr;
		double heightCm=Double.parseDouble(heightStr);
		double weightKg=Double.parseDouble(weightStr);
		double bmi=weightKg/Math.pow((heightCm/100) ,2 );
		String fileName;
		if(bmi<18.5) {
			fileName="img1.jpg";
		}else if(bmi < 25) {
			fileName="img2.jpg";
		}else if(bmi<30) {
			fileName="img3.jpg";
		}else if(bmi < 35) {
			fileName="img4.jpg";
		}else if(bmi<40) {
			fileName="img5.jpg";
		}else {
			fileName="img6.jpg";
		}
		String imgPath="http://localhost:8080/BMI_API/images/"+fileName;
		BMI b=new BMI();
		b.setHeight(heightCm);
		b.setWeight(weightKg);
		b.setBmi(Math.round(bmi*100)/100d);
		b.setImgPath(imgPath);
		response.setContentType("application/json;charset=utf-8");
		PrintWriter out =response.getWriter();
		Gson gson=new Gson();
		out.print(gson.toJson(b));
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}
}
画像の配置
imgPathで送信するURLに画像を置いておこう。WebContentフォルダの下にimagesフォルダを作成し、上でダウンロードした6枚の画像を配置する。


動作確認
GetDataファイルを右クリックして->実行->サーバーで実行


送られてきた文字列をパースした状態
リクエストパラーメータを送信していないのでデフォルト値が表示されている。ブラウザのURLを入力するところでクエリパラメータを送信しよう。


結果が表示される。


画像確認
送信されてくるJsonにあるimgPathをブラウザからリクエストしてみる。


無事画像も取得できることが確認できた。

このAPIの利用
以下の記事でこのWEB-APIを利用したアプリを作成している。そちらも参考にしていただきたい。

○WEBアプリ版(https://joytas.net/programming/bmi-webapp)

JSP & Servlet(BMI-API作成)

リクエストパラーメータで身長と体重を受け取るとBMIを測定し、その結果を以下のようなJSONで返却するWEB-APIを作成してみよう。なお、送信されるデータのBMIは小数点以下2桁とすること。


その際に結果に応じて6種類の画像パスも送信する。


送信する画像は以下からダウンロード。送信する画像パスの種別は画像下にあるbmi値によって振り分けること

Icon
bmi画像
 1 file(s)    215.70 KB
作例
1.エクリプスにて新規->動的ＷＥＢプロジェクトを選択。名前をBMI_APIとして作成する。

2.GsonでJsonパースを行いたいので以下のファイルをWEB-INF/libの中に貼り付ける

Icon
下からダウンロード
 1 file(s)    227.17 KB
2.新規->クラスからBMIクラスを作成する。その際パッケージ名はmodelとすること

package model;

import java.io.Serializable;

public class BMI implements Serializable{
	private double height;
	private double weight;
	private double bmi;
	private String imgPath;
	public BMI() {}
	public double getHeight() {
		return height;
	}
	public void setHeight(double height) {
		this.height = height;
	}
	public double getWeight() {
		return weight;
	}
	public void setWeight(double weight) {
		this.weight = weight;
	}
	public double getBmi() {
		return bmi;
	}
	public void setBmi(double bmi) {
		this.bmi = bmi;
	}
	public String getImgPath() {
		return imgPath;
	}
	public void setImgPath(String imgPath) {
		this.imgPath = imgPath;
	}

}
3.新規->サーブレットからGetData.javaを作成する。その際パッケージ名はcontrollerとすること。

package controller;
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;

import model.BMI;

@WebServlet("/GetData")
public class GetData extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		String heightStr=request.getParameter("height");
		String weightStr=request.getParameter("weight");

		heightStr=heightStr==null? "1":heightStr;
		weightStr=weightStr==null? "0":weightStr;
		double heightCm=Double.parseDouble(heightStr);
		double weightKg=Double.parseDouble(weightStr);
		double bmi=weightKg/Math.pow((heightCm/100) ,2 );
		String fileName;
		if(bmi<18.5) {
			fileName="img1.jpg";
		}else if(bmi < 25) {
			fileName="img2.jpg";
		}else if(bmi<30) {
			fileName="img3.jpg";
		}else if(bmi < 35) {
			fileName="img4.jpg";
		}else if(bmi<40) {
			fileName="img5.jpg";
		}else {
			fileName="img6.jpg";
		}
		String imgPath="http://localhost:8080/BMI_API/images/"+fileName;
		BMI b=new BMI();
		b.setHeight(heightCm);
		b.setWeight(weightKg);
		b.setBmi(Math.round(bmi*100)/100d);
		b.setImgPath(imgPath);
		response.setContentType("application/json;charset=utf-8");
		PrintWriter out =response.getWriter();
		Gson gson=new Gson();
		out.print(gson.toJson(b));
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}
}
画像の配置
imgPathで送信するURLに画像を置いておこう。WebContentフォルダの下にimagesフォルダを作成し、上でダウンロードした6枚の画像を配置する。


動作確認
GetDataファイルを右クリックして->実行->サーバーで実行


送られてきた文字列をパースした状態
リクエストパラーメータを送信していないのでデフォルト値が表示されている。ブラウザのURLを入力するところでクエリパラメータを送信しよう。


結果が表示される。


画像確認
送信されてくるJsonにあるimgPathをブラウザからリクエストしてみる。


無事画像も取得できることが確認できた。

このAPIの利用
以下の記事でこのWEB-APIを利用したアプリを作成している。そちらも参考にしていただきたい。

○WEBアプリ版(https://joytas.net/programming/bmi-webapp)

